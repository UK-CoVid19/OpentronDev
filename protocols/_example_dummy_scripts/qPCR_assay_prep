from opentrons import protocol_api

import math

# metadata
metadata = {
    'protocolName': 'qPCR Assay Preparation',
    'author': 'Name <linton.cai@gmail.com>',
    'description': 'COVID19 OpenCell qPCR Assay Preparation',
    'apiLevel': '2.2'
}

def run(protocol: protocol_api.ProtocolContext):
    #--- MANUAL INPUT FOR SETUP ---#
    num_samples = 94
    mastermix_vol = 20
    sample_vol = 5
    #------------------------------#
    if (num_samples <= 46):
        col_num1 = math.ceil((num_samples+2)*2/8)
        num_pcr = 1
    else
        col_num1 = 12
        col_num2 = (num_samples-12+2)*2/8
        num_pcr = 2

    # labware
    pcr_plate1 = protocol.load_labware('nest_96_wellplate_100ul_pcr_full_skirt', '1')
    if (num_pcr == 2):
        pcr_plate2 = protocol.load_labware('nest_96_wellplate_100ul_pcr_full_skirt', '2')
    tiprack_10 = protocol.load_labware('opentrons_96_filtertiprack_10ul', '3')
	tiprack_50 = protocol.load_labware('opentrons_96_filtertiprack_20ul', '4')
	reagents = protocol.load_labware('opentrons_24_aluminumblock_nest_2ml_screwcap','5')
	tempdeck = protocol.load('tempdeck','6')
		tempdeck.set_temperature(4)
	samples = tempdeck.load_labware('opentrons_24_aluminumblock_nest_1.5ml_snapcap')
        nf_water = reagents.well('A1') # nuclease-free water
        mastermixA = reagents.well('A2')
        mastermixB = reagents.well('A3')
        PTC = reagents.well('A4') # positive control
        NTC = reagents.well('A5') # negative control
        

    # pipettes
    p50m = protocol.load_instrument('p50_multi', 'left', tip_racks=[tiprack_50])#5 - 50 µL
	p10m = protocol.load_instrument('p10_multi', 'right', tip_racks = [tiprack_10])#1 - 10 µL

    # commands
    
    # distributing mastermixA to pcr plate wells
     
    p50m.pick_up_tip()
    #mix the mastermixA samples before transfer
    for _ in range(2):
        p50m.aspirate(10, mastermixA)
        p50m.dispense(10, mastermixA)
        
    # pcr plate 1
    for col in range(col_num1/2):
        p50m.transfer(mastermix_vol, mastermixA, pcr_plate1.wells()[col*8*2], new_tip='never')
    
    # pcr plate 2
    if num_pcr == 2:
        for col in range(col_num2/2):
            p50m.transfer(mastermix_vol, mastermixA, pcr_plate1.wells()[col*8*2], new_tip='never')
    
    p50m.drop_tip()
    
    # distributing mastermixB to pcr plate wells
     
    p50m.pick_up_tip()
    #mix the mastermixB samples before transfer
    for _ in range(2):
        p50m.aspirate(10, mastermixB)
        p50m.dispense(10, mastermixB)
        
    # pcr plate 1
    for col in range(col_num1/2):
        p50m.transfer(mastermix_vol_vol, mastermixB, pcr_plate1.wells()[(col+1)*8*2], new_tip='never')
    
    # pcr plate 2
    if num_pcr == 2:
        for col in range(col_num2/2):
            p50m.transfer(mastermix_vol_vol, mastermixB, pcr_plate2.wells()[(col+1)*8*2], new_tip='never')
    
    p50m.drop_tip()
    
    # distributing samples to mastermixA wells
    
    # pcr plate 1
    for col in range(col_num1/2):
        p10m.pick_up_tip()

        #mix the Purified RNA samples before transfer
        for _ in range(2):
            p10m.aspirate(10, sample_plate.wells()[col*8])
            p10m.dispense(10, sample_plate.wells()[col*8])

        p10m.transfer(sample_vol, samples.wells()[col*8], pcr_plate1.wells()[col*8*2], new_tip='never')
        
        #mix the Purified RNA samples bafter transfer
        for _ in range(2):
            p10m.aspirate(10, pcr_plate1.wells()[col*8*2])
            p10m.dispense(10, pcr_plate1.wells()[col*8*2])
            
        p10m.drop_tip()
    
    # pcr plate 2
    if num_pcr == 2:
        for col in range(col_num1/2, col_num2/2):
            p10m.pick_up_tip()

            #mix the Purified RNA samples before transfer
            for _ in range(2):
                p10m.aspirate(10, sample_plate.wells()[col*8])
                p10m.dispense(10, sample_plate.wells()[col*8])

            p10m.transfer(sample_vol, samples.wells()[col*8], pcr_plate2.wells()[col*8*2], new_tip='never')
            
            #mix the Purified RNA samples bafter transfer
            for _ in range(2):
                p10m.aspirate(10, pcr_plate1.wells()[col*8*2])
                p10m.dispense(10, pcr_plate1.wells()[col*8*2])
                
            p10m.drop_tip()
            
    # distributing samples to mastermixB wells
    
    # pcr plate 1
    for col in range(col_num1/2):
        p10m.pick_up_tip()

        #mix the Purified RNA samples before transfer
        for _ in range(2):
            p10m.aspirate(10, sample_plate.wells()[col*8])
            p10m.dispense(10, sample_plate.wells()[col*8])

        p10m.transfer(sample_vol, samples.wells()[col*8], pcr_plate1.wells()[col*8*2], new_tip='never')
        
        #mix the Purified RNA samples bafter transfer
        for _ in range(2):
            p10m.aspirate(10, pcr_plate1.wells()[col*8*2])
            p10m.dispense(10, pcr_plate1.wells()[col*8*2])
            
        p10m.drop_tip()
    
    # pcr plate 2
    if num_pcr == 2:
        for col in range(col_num1/2, col_num2/2):
            p10m.pick_up_tip()

            #mix the Purified RNA samples before transfer
            for _ in range(2):
                p10m.aspirate(10, sample_plate.wells()[col*8])
                p10m.dispense(10, sample_plate.wells()[col*8])

            p10m.transfer(sample_vol, samples.wells()[col*8], pcr_plate2.wells()[(col+1)*8*2], new_tip='never')
            
            #mix the Purified RNA samples bafter transfer
            for _ in range(2):
                p10m.aspirate(10, pcr_plate1.wells()[(col+1)*8*2])
                p10m.dispense(10, pcr_plate1.wells()[(col+1)*8*2])
                
            p10m.drop_tip()
